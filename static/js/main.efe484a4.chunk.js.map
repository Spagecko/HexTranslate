{"version":3,"sources":["components/Jumbotron.js","components/InputForm.js","components/OutputForm.js","components/ToggleBase.js","containers/HexiCalc.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["jumbotron","Jumbotron","fluid","Container","Style","minHeight","InputFrom","props","style","Row","className","InputGroup","size","defaultValue","inputVal","onChange","change","Prepend","Text","id","children","FormControl","placeholder","padStyle","paddingBottom","style1","minWidth","outputForm","display","currentSetting","ListGroup","horizontal","Item","Badge","variant","outBi","length","outHex","outDec","toggleBase","console","log","DropdownButton","onSelect","title","Dropdown","as","eventKey","HexiCalc","onChangeHandler","event","TempNumber","target","value","setState","DeciOutput","BiOutput","HexiOutput","state","currentInputSetting","test","parsedNumber","parseInt","binaryString","toString","hexString","decimalString","isHex1","isHex2","dropDownChange","currentInput","this","Component","FooterPage","color","md","containerStyle","width","maxWidth","App","Navbar","bg","Brand","href","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.efe484a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\n\r\n\r\nconst jumbotron = () => \r\n{ \r\n    return (<div>\r\n      <Jumbotron fluid>\r\n  <Container>\r\n    <h1>Need a Number Translated?!</h1>\r\n    <p>\r\n      Enter your values now!\r\n    </p>\r\n  </Container>\r\n</Jumbotron>\r\n      \r\n    </div>)\r\n}\r\n\r\n\r\nexport default jumbotron; ","\r\nimport React from \"react\";\r\n\r\nimport { InputGroup } from 'react-bootstrap';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport {DropdownButton} from 'react-bootstrap';\r\nimport {Container} from 'react-bootstrap';\r\nimport {Row} from \"react-bootstrap\";\r\nconst Style  = { \r\n\r\n\r\n    minHeight: \"40px\"\r\n}\r\n\r\nconst InputFrom= (props) =>\r\n{\r\n    return(\r\n        <div style = {Style}>\r\n    \r\n    <Container fluid>\r\n    <Row className = \"justify-content-md-center\">\r\n   \r\n    <InputGroup className=\"mb-3\" size=\"lg\"  \r\n    defaultValue = {props.inputVal}\r\n    onChange = {props.change} > \r\n    <InputGroup.Prepend>\r\n    <InputGroup.Text id=\"inputGroup-sizing-sm\">{props.children}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <FormControl\r\n      placeholder=\"Enter values here\"\r\n    />\r\n  </InputGroup>\r\n  </Row>\r\n</Container>\r\n\r\n        </div>\r\n    )\r\n\r\n   \r\n}\r\n\r\n\r\nexport default InputFrom; ","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nconst padStyle  = { \r\n    paddingBottom : \"20px\"\r\n}\r\nconst style1 = { \r\n    minWidth :\"190px\",\r\n    minHeight: \"40px\"\r\n}\r\nconst outputForm = props => {\r\n  let display = null;\r\n  switch (props.currentSetting) {\r\n    case \"Decimal\":\r\n      display = (\r\n        <div>\r\n          <Container>\r\n            <Row>\r\n                <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n                <ListGroup.Item>\r\n                    <div style = {style1}>\r\n                  \r\n                    <h7> <strong >Binary: </strong></h7> <Badge variant=\"light\"> {props.outBi.length}</Badge>\r\n                   \r\n                  </div>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outBi}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n            <Row>\r\n                <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n                <ListGroup.Item>\r\n                <div style = {style1}>\r\n                  \r\n                    <strong><h7> Hexadecimal: </h7> </strong> <Badge variant=\"light\"> {props.outHex.length}</Badge>\r\n                \r\n                  </div>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outHex}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case \"Binary\":\r\n      display = (\r\n        <div>\r\n          <Container>\r\n            <Row>\r\n            <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n                <ListGroup.Item>\r\n                <div style = {style1}> \r\n                <strong><h7> Decimal: </h7> </strong> <Badge variant=\"light\"> {props.outDec.length}</Badge>\r\n                  </div>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outDec}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n            <Row>\r\n            <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n                <ListGroup.Item>\r\n                 \r\n                  <div style = {style1}>\r\n                  \r\n                  <strong><h7> Hexadecimal: </h7> </strong> <Badge variant=\"light\"> {props.outHex.length}</Badge>\r\n              \r\n                </div>\r\n                \r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outHex}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case \"Hexadecimal\":\r\n      display = (\r\n        <div>\r\n            <Container>\r\n            <Row>\r\n            <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n                <ListGroup.Item>\r\n                <div style = {style1}>\r\n                  \r\n                <strong><h7> Decimal: </h7> </strong> <Badge variant=\"light\"> {props.outDec.length}</Badge>\r\n                 \r\n                  </div>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outDec}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n            <Row>\r\n            <div style = {padStyle}>\r\n              <ListGroup horizontal>\r\n             \r\n                <ListGroup.Item>\r\n                <div style = {style1}>\r\n                  \r\n                  <h7> <strong >Binary: </strong></h7> <Badge variant=\"light\"> {props.outBi.length}</Badge>\r\n                 \r\n                </div>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <strong>\r\n                    <p> {props.outBi}</p>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n              </div>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      display = null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container fluid>{display}</Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default outputForm;\r\n","import React from \"react\";\r\n\r\nimport { InputGroup } from \"react-bootstrap\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { DropdownButton } from \"react-bootstrap\";\r\nimport { MenuItem } from \"react-bootstrap\";\r\nconst style1 = { \r\n    minWidth :\"190px\",\r\n    minHeight: \"40px\"\r\n}\r\nconst toggleBase = props => {\r\n  console.log(props.currentSetting);\r\n  return (\r\n    <div style = {style1}>\r\n\r\n            <DropdownButton\r\n              id=\"dropdown-item-button\"\r\n              onSelect={props.change}\r\n              title={props.currentSetting}\r\n            >\r\n              <Dropdown.Item as=\"button\" eventKey=\"Decimal\">\r\n                Decimal\r\n              </Dropdown.Item>\r\n              <Dropdown.Item as=\"button\" eventKey=\"Binary\">\r\n                Binary\r\n              </Dropdown.Item>\r\n              <Dropdown.Item as=\"button\" eventKey=\"Hexadecimal\">\r\n                Hexadecimal\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default toggleBase;\r\n","import React, {Component} from 'react';\r\nimport InputFrom from '../components/InputForm';\r\nimport OutputFrom from '../components/OutputForm';\r\nimport ToggleButton from '../components/ToggleBase';\r\n\r\n\r\nimport { Form } from 'react-bootstrap';\r\nimport {Row } from 'react-bootstrap';\r\nclass HexiCalc extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state = {\r\n            currentInput:\"0\", \r\n            HexiOutput:\"0\", \r\n            BiOutput:\"0\", \r\n            DeciOutput: \"0\", \r\n            currentInputSetting:\"Decimal\"\r\n           \r\n\r\n            }\r\n        }\r\n    onChangeHandler= (event) =>\r\n    {\r\n        \r\n        let TempNumber =event.target.value;\r\n\r\n        if(TempNumber.length === 0)\r\n        {\r\n            this.setState ({DeciOutput :  \"\"});\r\n            this.setState ({BiOutput :  \"\"});\r\n            this.setState ({HexiOutput :  \"\"});\r\n        }\r\n        //decimal\r\n        if( this.state.currentInputSetting === \"Decimal\" && TempNumber.length !== 0)\r\n        {\r\n            let isDecimal =  /^\\d+$/.test(TempNumber);\r\n            if( isDecimal !== true)\r\n            {\r\n                let errorMSg = \"#ERROR\";\r\n                this.setState ({DeciOutput :  errorMSg});\r\n                this.setState ({BiOutput :  errorMSg});\r\n                this.setState ({HexiOutput :  errorMSg});\r\n            }\r\n            else\r\n            { \r\n                this.setState ({DeciOutput :  event.target.value});\r\n                //parsing section\r\n                let parsedNumber =  parseInt(TempNumber);\r\n                let binaryString = parsedNumber.toString(2);\r\n                let hexString = parsedNumber.toString(16); \r\n                this.setState ({BiOutput :  binaryString});\r\n                this.setState ({HexiOutput :  hexString});\r\n\r\n            }\r\n        }\r\n        //Binary \r\n        if( this.state.currentInputSetting === \"Binary\" && TempNumber.length !== 0)\r\n        {\r\n            const biTest = /^[0-1]{1,}$/; \r\n\r\n            let isBinary =  biTest.test(TempNumber)\r\n            if( isBinary  !== true)\r\n            {\r\n                console.log(\"Not Binary\")\r\n                let errorMSg = \"#ERROR\";\r\n                this.setState ({DeciOutput :  errorMSg});\r\n                this.setState ({BiOutput :  errorMSg});\r\n                this.setState ({HexiOutput :  errorMSg});\r\n            }\r\n            else\r\n            { \r\n                console.log(\"Is Binary\")\r\n                this.setState ({DeciOutput :  event.target.value});\r\n                //parsing section\r\n                let decimalString =  parseInt(TempNumber, 2);\r\n                let hexString = decimalString.toString(16); \r\n                this.setState ({DeciOutput:  decimalString});\r\n                this.setState ({HexiOutput :  hexString});\r\n\r\n            }\r\n        }\r\n        //Hexadecimal \r\n        if( this.state.currentInputSetting === \"Hexadecimal\" && TempNumber.length !== 0)\r\n        {\r\n            let isHexTest1 = /^[0-9a-f]{1,}$/\r\n            let isHexTest2 = /^[0-9A-F]{1,}$/\r\n            let isHex1 = isHexTest1.test(TempNumber); \r\n            let isHex2 =  isHexTest2.test(TempNumber) ; \r\n            if( isHex1!== true  && isHex2 != true )\r\n            {\r\n                let errorMSg = \"#ERROR\";\r\n                this.setState ({DeciOutput :  errorMSg});\r\n                this.setState ({BiOutput :  errorMSg});\r\n                this.setState ({HexiOutput :  errorMSg});\r\n            }\r\n            else\r\n            { \r\n                this.setState ({DeciOutput :  event.target.value});\r\n                //parsing section\r\n                let parsedNumber =  parseInt(TempNumber ,16);\r\n                let binaryString = parsedNumber.toString(2);\r\n            \r\n                this.setState ({BiOutput :  binaryString});\r\n                this.setState ({DeciOutput:  parsedNumber});\r\n\r\n            }\r\n        }\r\n        // implement a binary calc block \r\n        // implement a Hex calc block \r\n        // make output dynamatic \r\n    }\r\n    dropDownChange = (event) =>\r\n    {\r\n        this.setState({currentInputSetting: event})\r\n        this.setState ({DeciOutput : \"0\"});\r\n        this.setState ({BiOutput :  \"0\"});\r\n        this.setState ({HexiOutput : \"0\"});\r\n    }\r\n\r\n\r\n    render()\r\n            {\r\n                return (\r\n                <div>\r\n                <h2>Input Here!</h2>\r\n              \r\n                <InputFrom inputVal = {this.state.currentInput}  change = {this.onChangeHandler}>\r\n                 <ToggleButton change = {this.dropDownChange}  currentSetting = {this.state.currentInputSetting}/> </InputFrom>\r\n                  <h2>Output here!</h2>\r\n                  <OutputFrom outDec = {this.state.DeciOutput}\r\n                  outBi = {this.state.BiOutput}\r\n                  outHex = {this.state.HexiOutput}\r\n                  currentSetting = {this.state.currentInputSetting}/>\r\n                  \r\n                    {/*console.log(this.state.currentInputSetting) */}\r\n                    { /*console.log(this.state.currentInput) */ }\r\n                  \r\n                </div>\r\n\r\n             \r\n                ); \r\n         }\r\n      \r\n        \r\n            \r\n        \r\n}\r\n\r\n\r\n\r\nexport default HexiCalc;","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <MDBContainer fluid className=\"text-center text-md-left\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\">\r\n            <h5 className=\"title\">Made by Spagecko!\r\n            </h5>\r\n            <p>\r\n              React and Bootstrap project!\r\n            </p>\r\n          </MDBCol>\r\n   \r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n        put repo link here!\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n}\r\n\r\nexport default FooterPage;","import React from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bulma-components';\nimport HexiCalc from './containers/HexiCalc';\nimport Footer from './components/Footer';\nimport {Navbar} from 'react-bootstrap';\nimport {Container} from 'react-bootstrap';\n\nconst padStyle  = { \n  paddingBottom : \"150px\"\n}\nconst containerStyle =  { \n  width: \"100%\", \n  maxWidth : \"1000px\",\n}\nfunction App() {\n  return (\n\n\n    <div className = \"App\">\n      <div></div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">{' '}\n      Number Translate! \n    </Navbar.Brand>\n  </Navbar>\n    \n      <Jumbotron/>\n      <Container style =  {containerStyle}>\n      <HexiCalc/>\n      </Container>\n      <div style = {padStyle}></div>\n      <Footer/>\n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}